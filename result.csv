{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/nandamtejas/analyst_ai_assignment/blob/main/result.csv\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JgC8txwdyvMK",
        "outputId": "e664ae97-bc32-4053-9f78-3ac853446be0"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: bs4 in /usr/local/lib/python3.8/dist-packages (0.0.1)\n",
            "Requirement already satisfied: beautifulsoup4 in /usr/local/lib/python3.8/dist-packages (from bs4) (4.6.3)\n",
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.8/dist-packages (2.25.1)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.8/dist-packages (from requests) (2022.12.7)\n",
            "Requirement already satisfied: urllib3<1.27,>=1.21.1 in /usr/local/lib/python3.8/dist-packages (from requests) (1.24.3)\n",
            "Requirement already satisfied: chardet<5,>=3.0.2 in /usr/local/lib/python3.8/dist-packages (from requests) (4.0.0)\n",
            "Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.8/dist-packages (from requests) (2.10)\n"
          ]
        }
      ],
      "source": [
        "!pip install bs4\n",
        "!pip install requests"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "XfdieQ5K25Oa"
      },
      "outputs": [],
      "source": [
        "import requests\n",
        "import re\n",
        "from bs4 import BeautifulSoup as bs4\n",
        "import sys\n",
        "sys.setrecursionlimit(100000)\n",
        "import pandas as pd"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "VW7eXZUIy2xc"
      },
      "outputs": [],
      "source": [
        "# Constants\n",
        "BASE_URL = \"https://www.amazon.in\"\n",
        "HEADERS = {'User-Agent':\n",
        "            'Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.93 Safari/537.36',\n",
        "            'Accept-Language': 'en-US, en;q=0.5'}"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "98ZKY4yhzWIH"
      },
      "outputs": [],
      "source": [
        "class AmazonBags:\n",
        "    def __init__(self):\n",
        "        self.__page = 1\n",
        "        self.url = BASE_URL + f\"/s?k=bags&crid=2M096C61O4MLT&qid=1653308124&sprefix=ba%2Caps%2C283&ref=sr_pg_1\"\n",
        "        self.__soup = None\n",
        "        self.set_soup()\n",
        "\n",
        "    def reset_url(self):\n",
        "        self.url = BASE_URL + f\"/s?k=bags&crid=2M096C61O4MLT&qid=1653308124&sprefix=ba%2Caps%2C283&ref=sr_pg_1\"\n",
        "        self.set_soup()\n",
        "\n",
        "    def get_page(self):\n",
        "        return self.__page\n",
        "\n",
        "    def set_page(self, page):\n",
        "        self.__page = page\n",
        "\n",
        "    def get_soup(self, parser=\"html.parser\"):\n",
        "        return self.__soup     \n",
        "\n",
        "    def request(self):\n",
        "        response = requests.get(self.url, headers=HEADERS)\n",
        "        print(response)\n",
        "        return response if response.status_code == 200 else self.request()\n",
        "\n",
        "    def set_soup(self, parser=\"lxml\"):\n",
        "        response = self.request()\n",
        "        self.__soup = bs4(response.content, parser)\n",
        "\n",
        "    def get_soup_list(self, tagname, class_name=None, **attrs):\n",
        "        if class_name is not None:\n",
        "            res = self.__soup.find_all(tagname, class_=class_name, attrs=attrs)\n",
        "        else:\n",
        "            res = self.__soup.find_all(tagname, attrs=attrs)\n",
        "        return res\n",
        "\n",
        "    def update_url_next(self):\n",
        "        if self.get_page() == 20:\n",
        "            return \n",
        "        next_url = self.get_soup_list(\"a\", class_name=\"s-pagination-next\")[0].get(\"href\")\n",
        "        self.url = BASE_URL + next_url\n",
        "        self.set_soup()\n",
        "        self.set_page(self.__page + 1)\n",
        "\n",
        "    def update_url_previous(self):\n",
        "        if self.get_page() == 1:\n",
        "            return \n",
        "        prev_url = self.get_soup_list(\"a\", class_name=\"s-pagination-previous\")[0].get(\"href\")\n",
        "        self.url = BASE_URL + prev_url\n",
        "        self.set_soup()\n",
        "        self.set_page(self.__page - 1)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fPcMohi2zXjC",
        "outputId": "849120fe-6b0e-47a8-d5d5-c9cff0378894"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [200]>\n"
          ]
        }
      ],
      "source": [
        "amazon = AmazonBags()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "A7ADrnI6kpX1",
        "outputId": "524684c7-ab71-4734-8f17-89e474ca3949"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [200]>\n",
            "<Response [503]>\n",
            "<Response [200]>\n",
            "<Response [200]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [200]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [200]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [200]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [200]>\n",
            "<Response [503]>\n",
            "<Response [200]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [200]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [200]>\n",
            "<Response [503]>\n",
            "<Response [200]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [200]>\n",
            "<Response [503]>\n",
            "<Response [200]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [200]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [200]>\n",
            "<Response [200]>\n",
            "<Response [503]>\n",
            "<Response [200]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [200]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [200]>\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "20"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ],
      "source": [
        "products = []\n",
        "for i in range(1, 21):\n",
        "    html = amazon.get_soup_list(\"div\", class_name=\"s-asin\")\n",
        "    products.append(html)\n",
        "    amazon.update_url_next()\n",
        "len(products)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "id": "q6yWMTaT6g3y"
      },
      "outputs": [],
      "source": [
        "# PART 1\n",
        "amazon_bags = {}.fromkeys(range(1, 21), {\n",
        "    \"product_urls\": [],\n",
        "    \"product_names\": [],\n",
        "    \"product_prices\": [],\n",
        "    \"product_ratings\": [],\n",
        "    \"product_reviews\": []\n",
        "})"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "E1oy-Og4Mb7h",
        "outputId": "658b792b-1d23-4daf-f774-368fab2dc114"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<Response [503]>\n",
            "<Response [503]>\n",
            "<Response [200]>\n"
          ]
        }
      ],
      "source": [
        "amazon.reset_url()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "id": "zPEya1eSO12R"
      },
      "outputs": [],
      "source": [
        "class Handle:\n",
        "    def __init__(self, text):\n",
        "        self.text = text\n",
        "\n",
        "    def get(self, *args):\n",
        "        return \"\"\n",
        "\n",
        "def catch(func, *args, **kwargs):\n",
        "    try:\n",
        "        return func(*args, **kwargs)[0]\n",
        "    except Exception as e:\n",
        "        return Handle(\"\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "id": "O3C5uNzfqKhC"
      },
      "outputs": [],
      "source": [
        "for i in range(1, 21):\n",
        "    products_html = products[i-1]\n",
        "    amazon_bags[i] = {\n",
        "        \"product_urls\": [\"https://www.amazon.in\" + catch(products_html[j].find_all, \"a\", class_=\"s-no-outline\").get(\"href\") for j in range(len(products_html))],\n",
        "        \"product_names\": [catch(products_html[j].find_all, \"span\", class_=\"a-size-medium a-color-base a-text-normal\").text for j in range(len(products_html))],\n",
        "        \"product_prices\": [catch(products_html[j].find_all, \"span\", class_=\"a-offscreen\").text for j in range(len(products_html))],\n",
        "        \"product_ratings\": [catch(products_html[j].find_all, \"span\", class_=\"a-icon-alt\").text for j in range(len(products_html))],\n",
        "        \"product_reviews\": [\"\".join(\n",
        "            re.findall(r\"[0-9,]\", str(products_html[j].find_all(\n",
        "                \"span\", class_=\"a-size-base\"\n",
        "            )))\n",
        "        ) for j in range(len(products_html))]\n",
        "    }"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "J95IobUKwDoA",
        "outputId": "bc2dff02-19b2-4593-c3ab-0e5c35b1be66"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "16"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ],
      "source": [
        "p = amazon_bags[1]['product_urls']\n",
        "len(p)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "id": "1pU_M_LZklXk"
      },
      "outputs": [],
      "source": [
        "df = pd.concat([pd.DataFrame(amazon_bags[i]) for i in range(1, 21)], axis=0)\n",
        "df.to_csv(\"result.csv\")"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "FExr1nuDjkOE"
      },
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPO1t73fztUhQd+iMuocO/b",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}